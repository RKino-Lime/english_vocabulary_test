!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/ishida/myfiles/products/english_vocabulary_test/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/1f2c0e0/
AppArg	bin/make_completion_script.rs	/^struct AppArg {$/;"	s
Card	card.rs	/^impl Card {$/;"	c
Card	card.rs	/^pub(crate) struct Card {$/;"	s
CardList	card.rs	/^impl CardList {$/;"	c
CardList	card.rs	/^pub(crate) struct CardList {$/;"	s
Cli	activate.rs	/^impl Cli {$/;"	c
Cli	activate.rs	/^pub struct Cli {$/;"	s
ExamMaker	exam_maker.rs	/^impl ExamMaker {$/;"	c
ExamMaker	exam_maker.rs	/^pub struct ExamMaker {$/;"	s
activate	lib.rs	/^pub mod activate;$/;"	n
adjective	card.rs	/^    adjective: Option<Vec<String>>,$/;"	m	struct:Card
adverb	card.rs	/^    adverb: Option<Vec<String>>,$/;"	m	struct:Card
card	card.rs	/^    card: Vec<Card>,$/;"	m	struct:CardList
card	lib.rs	/^mod card;$/;"	n
card_file	activate.rs	/^    card_file: PathBuf,$/;"	m	struct:Cli
exam_maker	lib.rs	/^mod exam_maker;$/;"	n
exam_tex_file_name	exam_maker.rs	/^    exam_tex_file_name: PathBuf,$/;"	m	struct:ExamMaker
id	card.rs	/^    id: u64,$/;"	m	struct:Card
main	bin/make_completion_script.rs	/^fn main() -> Result<()> {$/;"	f
main	main.rs	/^fn main() -> Result<()> {$/;"	f
make_exam_tex_file	exam_maker.rs	/^    pub(crate) fn make_exam_tex_file<R: Rng + ?Sized>($/;"	P	implementation:ExamMaker
make_exam_tex_string	exam_maker.rs	/^    fn make_exam_tex_string<R: Rng + ?Sized>($/;"	P	implementation:ExamMaker
noun	card.rs	/^    noun: Option<Vec<String>>,$/;"	m	struct:Card
num_problem	activate.rs	/^    num_problem: usize,$/;"	m	struct:Cli
page	card.rs	/^    page: u64,$/;"	m	struct:Card
phrase	card.rs	/^    phrase: Option<bool>,$/;"	m	struct:Card
pick_up_cards_randomly_according_to_priority	card.rs	/^    pub(crate) fn pick_up_cards_randomly_according_to_priority<R: Rng + ?Sized>($/;"	P	implementation:CardList
preposition	card.rs	/^    preposition: Option<Vec<String>>,$/;"	m	struct:Card
priority	card.rs	/^    priority: u64,$/;"	m	struct:Card
read_card_list_from_file	card.rs	/^    pub(crate) fn read_card_list_from_file(file: &Path) -> Result<Self> {$/;"	P	implementation:CardList
run	activate.rs	/^    pub fn run() -> Result<()> {$/;"	P	implementation:Cli
sentence	card.rs	/^    sentence: Option<String>,$/;"	m	struct:Card
shell	bin/make_completion_script.rs	/^    shell: Shell,$/;"	m	struct:AppArg
tag	card.rs	/^fn tag(phrase: bool, name: &str) -> String {$/;"	f
to_tex_string	card.rs	/^    pub(crate) fn to_tex_string(&self) -> String {$/;"	P	implementation:Card
try_new	exam_maker.rs	/^    pub(crate) fn try_new(card_file: &Path) -> Result<Self> {$/;"	P	implementation:ExamMaker
verb	card.rs	/^    verb: Option<Vec<String>>,$/;"	m	struct:Card
work_dir	exam_maker.rs	/^    work_dir: PathBuf,$/;"	m	struct:ExamMaker
write_meaning_list	card.rs	/^fn write_meaning_list($/;"	f
